cal$fitted.90s
cal$fitted.00s
obj_70s
obj_70s <- hydromad(load_tsPQE(t_year = '70s'), sma = "cmd", routing = 'expuh', f=range(0.5,2.5),e=range(0.5,1.2),tau_s=range(5,1000), tau_q=range(0.5,10), v_s=range(0,1))
obj_80s <- hydromad(load_tsPQE(t_year = '80s'), sma = "cmd", routing = 'expuh', f=range(0.5,2.5),e=range(0.5,1.2),tau_s=range(5,1000), tau_q=range(0.5,10), v_s=range(0,1))
obj_90s <- hydromad(load_tsPQE(t_year = '90s'), sma = 'cmd', routing = 'expuh', f=range(0.5,2.5),e=range(0.5,1.2),tau_s=range(5,1000), tau_q=range(0.5,10), v_s=range(0,1))
obj_00s <- hydromad(load_tsPQE(t_year = '00s'), sma = 'cmd', routing = 'expuh', f=range(0.5,2.5),e=range(0.5,1.2),tau_s=range(5,1000), tau_q=range(0.5,10), v_s=range(0,1))
set.seed(1221)
cal$time.70s
cal$time.80s
current.time
proc.time()
set.seed(1221)
cal = list()
set.seed(1221)
cal = list()
current.time = proc.time()
cal$ts70s$fitted = fitBySCE(obj_70s, control = list(trace = 1, ncomplex = 20) )
cal$ts70s$time =  proc.time() - current.time
current.time = proc.time()
cal$ts80s$fitted = fitBySCE(obj_80s, control = list(trace = 1, ncomplex = 20) )
cal$ts80s$time =  proc.time() - current.time
current.time = proc.time()
cal$ts90s$fitted = fitBySCE(obj_90s, control = list(trace = 1, ncomplex = 20) )
cal$ts90s$time =  proc.time() - current.time
current.time = proc.time()
cal$ts00s$fitted = fitBySCE(obj_00s, control = list(trace = 1, ncomplex = 20) )
cal$ts00s$time =  proc.time() - current.time
save.image('fitted_decades.Rdata')
cal$ts70s$fitted
obj_70s$data
update(cal$ts70s$fitted, newdata = obj_70s$data)
updated$ts70s = update(cal$ts70s$fitted, newdata = obj_70s$data)
updated = list()
updated$ts70s = update(cal$ts70s$fitted, newdata = obj_70s$data)
head(obj_70s$data)
head(updated$ts70s$data)
head(updated$ts70s$parlist)
fitted(updated$ts70s)
head(fitted(updated$ts70s))
head(observed(updated$ts70s))
head(updated$ts70s$data)
updated$ts70s$data
fitted
updated$ts70s = update(cal$ts70s$fitted, newdata = obj_70s$data)
updated$ts80s = update(cal$ts80s$fitted, newdata = obj_80s$data)
updated$ts90s = update(cal$ts90s$fitted, newdata = obj_80s$data)
updated$ts00s = update(cal$ts00s$fitted, newdata = obj_80s$data)
exact.series$ts70s$Q['1964-04-12::2009-12-31']
#extract simulated flow series (it contains 100 days warm-up period )
exact.series = list()
exact.series$ts70s = obj_70s$data
exact.series$ts80s = obj_80s$data
exact.series$ts90s = obj_90s$data
exact.series$ts00s = obj_00s$data
exact.series$ts70s$Q['1964-04-12::2009-12-31']
exact.series$ts70s
exact.series$ts70s$Q
updated$ts70s
fitted(updated$ts70s)
head(fitted(updated$ts70s))
exact.series$ts70s$Q['1970-04-12::2009-12-31']
exact.series$ts70s$Q
exact.series$ts70s = xts(obj_70s$data)
exact.series$ts70s$Q['1970-04-12::2009-12-31']
exact.series = list()
exact.series$ts70s = xts(obj_70s$data)
exact.series$ts80s = xts(obj_80s$data)
exact.series$ts90s = xts(obj_90s$data)
exact.series$ts00s = xts(obj_00s$data)
exact.series$ts70s$Q['1970-04-12::2009-12-31']
observed(updated$ts70s)
obj_70s$data
observed(updated$ts70s)
head(updated$ts70s$data)
head(obj_70s$data)
tail(updated$ts70s$data)
tail(obj_70s$data)
exact.series = list()
exact.series$ts70s = xts(updated$ts70s$data)
exact.series$ts80s = xts(updated$ts80s$data)
exact.series$ts90s = xts(updated$ts90s$data)
exact.series$ts00s = xts(updated$ts00s$data)
View(ts70s)
fitted(updated$ts70s)
index(fitted(updated$ts70s))
head(index(fitted(updated$ts70s)))
summary(index(fitted(updated$ts70s)))
fitted(updated$ts70s)
summary(index(fitted(updated$ts70s)))
summary(index(fitted(updated$ts70s)))[1]
summary(index(fitted(updated$ts70s)))
updated$ts70s[1]
updated$ts70s$data[1]
updated$ts70s$data[100]
nrow(updated$ts70s)
nrow(updated$ts70s$data)
updated$ts70s
fitted(updated$ts70s)
nrow(fitted(updated$ts70s))
fitted(updated$ts70s)
length(fitted(updated$ts70s))
exact.series$ts70s$Q[100:length(fitted(updated$ts70s))] = fitted(updated$ts70s)
fitted(updated$ts70s)
exact.series$ts70s$Q[100:(length(fitted(updated$ts70s))+100)] = fitted(updated$ts70s)
exact.series$ts70s[100]
head(fitted(updated$ts70s))
exact.series$ts70s$Q[101:length(fitted(updated$ts70s))+100)] = fitted(updated$ts70s)
exact.series$ts70s$Q[101:(length(fitted(updated$ts70s))+101)] = fitted(updated$ts70s)
exact.series$ts70s$Q[101:(length(fitted(updated$ts70s))+100)] = fitted(updated$ts70s)
exact.series$ts70s
exact.series$ts70s[101:(length(fitted(updated$ts70s))+100)]
write.zoo(exact.series$ts70s[101:(length(fitted(updated$ts70s))+100)],'exact_tsPQE_cal70s.csv',sep=',')
exact.series$ts70s$Q[101:(length(fitted(updated$ts70s))+100)] = fitted(updated$ts70s)
write.zoo(exact.series$ts70s[101:(length(fitted(updated$ts70s))+100)],'exact_tsPQE_cal70s.csv',sep=',')
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
exact.series$ts70s$Q[101:(length(fitted(updated$ts70s))+100)] = fitted(updated$ts70s)
write.zoo(exact.series$ts70s[101:(length(fitted(updated$ts70s))+100)],'exact_tsPQE_cal70s.csv',sep=',')
write.zoo(exact.series$ts70s[101:(length(fitted(updated$ts70s))+100)],'exact_Gingera_cal70s.csv',sep=',')
write.zoo(exact.series$ts70s[101:(length(fitted(updated$ts70s))+100)],'exact_Gingera_cal70s.csv',sep=',')
name.decades = c('70s','80s','90s','00s')
exact.series$[[y]]
exact.series$[y]
exact.series$y
y='ts70s'
y = 'ts70s'
exact.series$y
exact.series$[y]
exact.series$[[y]]
exact.series[[y]]
updated[[y]]
name.decades = c('ts70s','ts80s','ts90s','ts00s')
for (y in name.decades){
exact.series[[y]]$Q[101:(length(fitted(updated[[y]]))+100)] = fitted(updated[[y]])
write.zoo(exact.series[[y]][101:(length(fitted(updated[[y]])+100))],'exact_Gingera_cal70s.csv',sep=',')
}
name.decades = c('ts70s','ts80s','ts90s','ts00s')
for (y in name.decades){
exact.series[[y]]$Q[101:(length(fitted(updated[[y]]))+100)] = fitted(updated[[y]])
write.zoo(exact.series[[y]][101:(length(fitted(updated[[y]])+100))],paste0('exact_Gingera_',y,'.csv'),sep=',')
}
#update new parameter to original tsPQE
updated = list()
updated$ts70s = update(cal$ts70s$fitted, newdata = obj_70s$data)
updated$ts80s = update(cal$ts80s$fitted, newdata = obj_80s$data)
updated$ts90s = update(cal$ts90s$fitted, newdata = obj_90s$data)
updated$ts00s = update(cal$ts00s$fitted, newdata = obj_00s$data)
head(fitted(updated$ts70s))
#extract simulated flow series (it contains 100 days warm-up period )
exact.series = list()
exact.series$ts70s = xts(updated$ts70s$data)
exact.series$ts80s = xts(updated$ts80s$data)
exact.series$ts90s = xts(updated$ts90s$data)
exact.series$ts00s = xts(updated$ts00s$data)
summary(index(fitted(updated$ts70s)))
name.decades = c('ts70s','ts80s','ts90s','ts00s')
for (y in name.decades){
exact.series[[y]]$Q[101:(length(fitted(updated[[y]]))+100)] = fitted(updated[[y]])
write.zoo(exact.series[[y]][101:(length(fitted(updated[[y]])+100))],paste0('exact_Gingera_',y,'.csv'),sep=',')
}
#update new parameter to original tsPQE
updated = list()
updated$ts70s = update(cal$ts70s$fitted, newdata = obj_70s$data)
updated$ts80s = update(cal$ts80s$fitted, newdata = obj_80s$data)
updated$ts90s = update(cal$ts90s$fitted, newdata = obj_90s$data)
updated$ts00s = update(cal$ts00s$fitted, newdata = obj_00s$data)
head(fitted(updated$ts70s))
#extract simulated flow series (it contains 100 days warm-up period )
exact.series = list()
exact.series$ts70s = xts(updated$ts70s$data)
exact.series$ts80s = xts(updated$ts80s$data)
exact.series$ts90s = xts(updated$ts90s$data)
exact.series$ts00s = xts(updated$ts00s$data)
summary(index(fitted(updated$ts70s)))
name.decades = c('ts70s','ts80s','ts90s','ts00s')
for (y in name.decades){
exact.series[[y]]$Q[101:(length(fitted(updated[[y]]))+100)] = fitted(updated[[y]])
write.zoo(exact.series[[y]][101:(length(fitted(updated[[y]])+100))],paste0('exact_Gingera_',y,'.csv'),sep=',')
}
load_synthetic_tsPQE <- function(t_catchment='Gingera_synthetic', t_year='70s'){
name_tspqe=str_c('C:/UserData/seol/Sensitivity Analyses/PQE input/',t_catchment,'/','exact_',t_catchment,'_ts',t_year,'.csv')
tsPQE=read.zoo(name_tspqe,sep=',',header=TRUE);  tsPQE=as.xts(tsPQE)
assign('ts_t_year', tsPQE, envir = .GlobalEnv)
return(ts_t_year)
}
load_synthetic_tsPQE <- function(t_catchment='Gingera_synthetic', t_year='70s'){
name_tspqe=str_c('C:/UserData/seol/Sensitivity Analyses/PQE input/',t_catchment,'/','exact_',t_catchment,'_ts',t_year,'.csv')
tsPQE=read.zoo(name_tspqe,sep=',',header=TRUE);  tsPQE=as.xts(tsPQE)
assign('ts_t_year', tsPQE, envir = .GlobalEnv)
return(ts_t_year)
}
est_J_H(t_catchment = 'Gingera_synthetic', sub_catchment = '100-samples', t_year = '70s', no_seed = 2025, perts='1e-04',
Nsamp =100, method='random')
source('C:/UserData/seol/Sensitivity Analyses/IHACRES/AS/utils_AS.R', echo=TRUE)
est_J_H(t_catchment = 'Gingera_synthetic', sub_catchment = '100-samples', t_year = '70s', no_seed = 2025, perts='1e-04',
Nsamp =100, method='random')
source('C:/UserData/seol/Sensitivity Analyses/IHACRES/AS/utils_AS.R', echo=TRUE)
source('C:/UserData/seol/Sensitivity Analyses/IHACRES/AS/utils_AS.R', echo=TRUE)
est_J_H(t_catchment = 'Gingera_synthetic', sub_catchment = '100-samples', t_year = '70s', no_seed = 2025, perts='1e-04',
Nsamp =100, method='random')
#Sobol & DELSA for Sacramento
library('zoo')
library('hydromad')
library('xts')
library('stringr')
library('ggplot2')
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source('functions_morris.R')
library('sensitivity')
library(boot)
source('functions_morris.R')
ts_t_year = load_synthetic_tsPQE(t_year = '70s')
ts_t_year = load_synthetic_tsPQE(t_year = '70s')
## Setup hydromad object  f
# hobj$parlist[['shape']]
# hydromad.options(objective = ~hmadstat("r.squared")(Q, X)/(2-hmadstat("r.squared")(Q, X)))
hydromad.options(objective = hmadstat('RMSE'))
hydromad.getOption('objective')
hobj = hydromad(ts_t_year,sma='cmd',routing='expuh',f=range(0.5,1.5),e=range(0.99,1.01),d=range(200,550),tau_q=range(3,10), tau_s=range(200,1000),  v_s=range(0.7,1))
# hobj = hydromad(ts_t_year,sma='cmd',routing='expuh',f=range(0.5,1.5),e=range(0.99,1.01),d=range(200,550),tau_q=range(3,10), tau_s=range(200,1000),  v_s=range(0.7,1))
r = 10
incompl <- morris(model = NULL, factors = names(getFreeParsRanges(hobj)) , r = r,
design = list(type = "oat", levels = 10, grid.jump = 2),
binf=sapply(getFreeParsRanges(hobj),min),
bsup=sapply(getFreeParsRanges(hobj),max))
results=evalPars(incompl$X,object=hobj)
#calculate Morris measures
morris_obj = tell(incompl,results)
incompl$scale
#bootstrap model performance measures
data=morris_obj$ee
#estimate CIs by bootsrapping
m.boot <- boot(data, estim_morris_mu , R = 2000)
m.ci <- b.stats.morris(m.boot)
# rownames(m.ci) <- col_header
s.boot <- boot(data, estim_morris_sig , R = 2000)
s.ci <- b.stats.morris(s.boot)
# rownames(s.ci) <- col_header
sink(str_c('morris_',nrow(incompl$X),'_mu.txt'))
print(m.ci)
sink()
sink(str_c('morris_',nrow(incompl$X),'_sig.txt'))
print(s.ci)
sink()
kaka = cbind(incompl$X,results)
head(kaka)
write.csv(kaka,'par_set.csv',row.names = FALSE)
sink('parameter_range.txt')
print(paste('Nsamp =',length(names(hobj$parlist))))
print(hobj)
sink()
# temp_runs=m.ci
#
# p2=ggplot(data=temp_runs, aes(fill=Parameter, x=model_runs, y=sensitivity))+
#   geom_bar(position="dodge", stat="identity")+
#   geom_errorbar(aes(ymax=max.c.i., ymin=min.c.i.), position=position_dodge(width=0.9), width=0.25)+
#   theme(axis.text.x = element_text(angle=90, colour = "black"),
#         axis.text.y = element_text(colour = "black"),
#         axis.line = element_line(colour = "black"),
#         panel.background = element_blank())+
#   scale_x_discrete(breaks=1:9, labels=runs$alias[1:9], limits=c(1:9))+
#   ylab("TSI")+
#   #   scale_fill_manual( values = c('Rchrg_Dp'='grey80',
#   #                                 'Alpha_Bf'='black',
#   #                                 'Gwqmn'='grey60',
#   #                                 'Esco'='grey20',
#   #                                 'Sol_Awc'='grey40') )
#   scale_fill_grey()
name.dir = paste0('Gingera_synthetic/',t_year)
t_year = '70s'
name.dir = paste0('Gingera_synthetic/',t_year)
t_year = '70s'
name.dir = paste0('Gingera_synthetic/',t_year,'/')
sink(paste0(name.dir,'parameter_range.txt'))
print(paste('Nsamp =',length(names(hobj$parlist))))
print(hobj)
sink()
t_year = '80s'
name.dir = paste0('Gingera_synthetic/',t_year,'/')
ts_t_year = load_synthetic_tsPQE(t_year = t_year)
## Setup hydromad object  f
# hobj$parlist[['shape']]
# hydromad.options(objective = ~hmadstat("r.squared")(Q, X)/(2-hmadstat("r.squared")(Q, X)))
hydromad.options(objective = hmadstat('RMSE'))
hydromad.getOption('objective')
hobj = hydromad(ts_t_year,sma='cmd',routing='expuh',f=range(0.5,1.5),e=range(0.99,1.01),d=range(200,550),tau_q=range(3,10), tau_s=range(200,1000),  v_s=range(0.7,1))
# hobj = hydromad(ts_t_year,sma='cmd',routing='expuh',f=range(0.5,1.5),e=range(0.99,1.01),d=range(200,550),tau_q=range(3,10), tau_s=range(200,1000),  v_s=range(0.7,1))
r = 10
incompl <- morris(model = NULL, factors = names(getFreeParsRanges(hobj)) , r = r,
design = list(type = "oat", levels = 10, grid.jump = 2),
binf=sapply(getFreeParsRanges(hobj),min),
bsup=sapply(getFreeParsRanges(hobj),max))
results=evalPars(incompl$X,object=hobj)
#calculate Morris measures
morris_obj = tell(incompl,results)
incompl$scale
#bootstrap model performance measures
data=morris_obj$ee
#estimate CIs by bootsrapping
m.boot <- boot(data, estim_morris_mu , R = 2000)
m.ci <- b.stats.morris(m.boot)
# rownames(m.ci) <- col_header
s.boot <- boot(data, estim_morris_sig , R = 2000)
s.ci <- b.stats.morris(s.boot)
# rownames(s.ci) <- col_header
sink(str_c(name.dir,'morris_',nrow(incompl$X),'_mu.txt'))
print(m.ci)
sink()
sink(str_c(name.dir,'morris_',nrow(incompl$X),'_sig.txt'))
print(s.ci)
sink()
kaka = cbind(incompl$X,results)
head(kaka)
write.csv(kaka,paste0(name.dir,'par_set.csv'),row.names = FALSE)
sink(paste0(name.dir,'parameter_range.txt'))
print(paste('Nsamp =',length(names(hobj$parlist))))
print(hobj)
sink()
# temp_runs=m.ci
#
# p2=ggplot(data=temp_runs, aes(fill=Parameter, x=model_runs, y=sensitivity))+
#   geom_bar(position="dodge", stat="identity")+
#   geom_errorbar(aes(ymax=max.c.i., ymin=min.c.i.), position=position_dodge(width=0.9), width=0.25)+
#   theme(axis.text.x = element_text(angle=90, colour = "black"),
#         axis.text.y = element_text(colour = "black"),
#         axis.line = element_line(colour = "black"),
#         panel.background = element_blank())+
#   scale_x_discrete(breaks=1:9, labels=runs$alias[1:9], limits=c(1:9))+
#   ylab("TSI")+
#   #   scale_fill_manual( values = c('Rchrg_Dp'='grey80',
#   #                                 'Alpha_Bf'='black',
#   #                                 'Gwqmn'='grey60',
#   #                                 'Esco'='grey20',
#   #                                 'Sol_Awc'='grey40') )
#   scale_fill_grey()
t_year = '80s'
name.dir = paste0('Gingera_synthetic/',t_year,'/')
dir.create(name.dir,recursive = TRUE, showWarnings = F)
ts_t_year = load_synthetic_tsPQE(t_year = t_year)
## Setup hydromad object  f
# hobj$parlist[['shape']]
# hydromad.options(objective = ~hmadstat("r.squared")(Q, X)/(2-hmadstat("r.squared")(Q, X)))
hydromad.options(objective = hmadstat('RMSE'))
hydromad.getOption('objective')
hobj = hydromad(ts_t_year,sma='cmd',routing='expuh',f=range(0.5,1.5),e=range(0.99,1.01),d=range(200,550),tau_q=range(3,10), tau_s=range(200,1000),  v_s=range(0.7,1))
# hobj = hydromad(ts_t_year,sma='cmd',routing='expuh',f=range(0.5,1.5),e=range(0.99,1.01),d=range(200,550),tau_q=range(3,10), tau_s=range(200,1000),  v_s=range(0.7,1))
r = 10
incompl <- morris(model = NULL, factors = names(getFreeParsRanges(hobj)) , r = r,
design = list(type = "oat", levels = 10, grid.jump = 2),
binf=sapply(getFreeParsRanges(hobj),min),
bsup=sapply(getFreeParsRanges(hobj),max))
results=evalPars(incompl$X,object=hobj)
#calculate Morris measures
morris_obj = tell(incompl,results)
incompl$scale
#bootstrap model performance measures
data=morris_obj$ee
#estimate CIs by bootsrapping
m.boot <- boot(data, estim_morris_mu , R = 2000)
m.ci <- b.stats.morris(m.boot)
# rownames(m.ci) <- col_header
s.boot <- boot(data, estim_morris_sig , R = 2000)
s.ci <- b.stats.morris(s.boot)
# rownames(s.ci) <- col_header
sink(str_c(name.dir,'morris_',nrow(incompl$X),'_mu.txt'))
print(m.ci)
sink()
sink(str_c(name.dir,'morris_',nrow(incompl$X),'_sig.txt'))
print(s.ci)
sink()
kaka = cbind(incompl$X,results)
head(kaka)
write.csv(kaka,paste0(name.dir,'par_set.csv'),row.names = FALSE)
sink(paste0(name.dir,'parameter_range.txt'))
print(paste('Nsamp =',length(names(hobj$parlist))))
print(hobj)
sink()
# temp_runs=m.ci
#
# p2=ggplot(data=temp_runs, aes(fill=Parameter, x=model_runs, y=sensitivity))+
#   geom_bar(position="dodge", stat="identity")+
#   geom_errorbar(aes(ymax=max.c.i., ymin=min.c.i.), position=position_dodge(width=0.9), width=0.25)+
#   theme(axis.text.x = element_text(angle=90, colour = "black"),
#         axis.text.y = element_text(colour = "black"),
#         axis.line = element_line(colour = "black"),
#         panel.background = element_blank())+
#   scale_x_discrete(breaks=1:9, labels=runs$alias[1:9], limits=c(1:9))+
#   ylab("TSI")+
#   #   scale_fill_manual( values = c('Rchrg_Dp'='grey80',
#   #                                 'Alpha_Bf'='black',
#   #                                 'Gwqmn'='grey60',
#   #                                 'Esco'='grey20',
#   #                                 'Sol_Awc'='grey40') )
#   scale_fill_grey()
t_year = '90s'
name.dir = paste0('Gingera_synthetic/',t_year,'/')
dir.create(name.dir,recursive = TRUE, showWarnings = F)
ts_t_year = load_synthetic_tsPQE(t_year = t_year)
## Setup hydromad object  f
# hobj$parlist[['shape']]
# hydromad.options(objective = ~hmadstat("r.squared")(Q, X)/(2-hmadstat("r.squared")(Q, X)))
hydromad.options(objective = hmadstat('RMSE'))
hydromad.getOption('objective')
hobj = hydromad(ts_t_year,sma='cmd',routing='expuh',f=range(0.5,1.5),e=range(0.99,1.01),d=range(200,550),tau_q=range(3,10), tau_s=range(200,1000),  v_s=range(0.7,1))
# hobj = hydromad(ts_t_year,sma='cmd',routing='expuh',f=range(0.5,1.5),e=range(0.99,1.01),d=range(200,550),tau_q=range(3,10), tau_s=range(200,1000),  v_s=range(0.7,1))
r = 10
incompl <- morris(model = NULL, factors = names(getFreeParsRanges(hobj)) , r = r,
design = list(type = "oat", levels = 10, grid.jump = 2),
binf=sapply(getFreeParsRanges(hobj),min),
bsup=sapply(getFreeParsRanges(hobj),max))
results=evalPars(incompl$X,object=hobj)
#calculate Morris measures
morris_obj = tell(incompl,results)
incompl$scale
#bootstrap model performance measures
data=morris_obj$ee
#estimate CIs by bootsrapping
m.boot <- boot(data, estim_morris_mu , R = 2000)
m.ci <- b.stats.morris(m.boot)
# rownames(m.ci) <- col_header
s.boot <- boot(data, estim_morris_sig , R = 2000)
s.ci <- b.stats.morris(s.boot)
# rownames(s.ci) <- col_header
sink(str_c(name.dir,'morris_',nrow(incompl$X),'_mu.txt'))
print(m.ci)
sink()
sink(str_c(name.dir,'morris_',nrow(incompl$X),'_sig.txt'))
print(s.ci)
sink()
kaka = cbind(incompl$X,results)
head(kaka)
write.csv(kaka,paste0(name.dir,'par_set.csv'),row.names = FALSE)
sink(paste0(name.dir,'parameter_range.txt'))
print(paste('Nsamp =',length(names(hobj$parlist))))
print(hobj)
sink()
# temp_runs=m.ci
#
# p2=ggplot(data=temp_runs, aes(fill=Parameter, x=model_runs, y=sensitivity))+
#   geom_bar(position="dodge", stat="identity")+
#   geom_errorbar(aes(ymax=max.c.i., ymin=min.c.i.), position=position_dodge(width=0.9), width=0.25)+
#   theme(axis.text.x = element_text(angle=90, colour = "black"),
#         axis.text.y = element_text(colour = "black"),
#         axis.line = element_line(colour = "black"),
#         panel.background = element_blank())+
#   scale_x_discrete(breaks=1:9, labels=runs$alias[1:9], limits=c(1:9))+
#   ylab("TSI")+
#   #   scale_fill_manual( values = c('Rchrg_Dp'='grey80',
#   #                                 'Alpha_Bf'='black',
#   #                                 'Gwqmn'='grey60',
#   #                                 'Esco'='grey20',
#   #                                 'Sol_Awc'='grey40') )
#   scale_fill_grey()
t_year = '00s'
name.dir = paste0('Gingera_synthetic/',t_year,'/')
dir.create(name.dir,recursive = TRUE, showWarnings = F)
ts_t_year = load_synthetic_tsPQE(t_year = t_year)
## Setup hydromad object  f
# hobj$parlist[['shape']]
# hydromad.options(objective = ~hmadstat("r.squared")(Q, X)/(2-hmadstat("r.squared")(Q, X)))
hydromad.options(objective = hmadstat('RMSE'))
hydromad.getOption('objective')
hobj = hydromad(ts_t_year,sma='cmd',routing='expuh',f=range(0.5,1.5),e=range(0.99,1.01),d=range(200,550),tau_q=range(3,10), tau_s=range(200,1000),  v_s=range(0.7,1))
# hobj = hydromad(ts_t_year,sma='cmd',routing='expuh',f=range(0.5,1.5),e=range(0.99,1.01),d=range(200,550),tau_q=range(3,10), tau_s=range(200,1000),  v_s=range(0.7,1))
r = 10
incompl <- morris(model = NULL, factors = names(getFreeParsRanges(hobj)) , r = r,
design = list(type = "oat", levels = 10, grid.jump = 2),
binf=sapply(getFreeParsRanges(hobj),min),
bsup=sapply(getFreeParsRanges(hobj),max))
results=evalPars(incompl$X,object=hobj)
#calculate Morris measures
morris_obj = tell(incompl,results)
incompl$scale
#bootstrap model performance measures
data=morris_obj$ee
#estimate CIs by bootsrapping
m.boot <- boot(data, estim_morris_mu , R = 2000)
m.ci <- b.stats.morris(m.boot)
# rownames(m.ci) <- col_header
s.boot <- boot(data, estim_morris_sig , R = 2000)
s.ci <- b.stats.morris(s.boot)
# rownames(s.ci) <- col_header
sink(str_c(name.dir,'morris_',nrow(incompl$X),'_mu.txt'))
print(m.ci)
sink()
sink(str_c(name.dir,'morris_',nrow(incompl$X),'_sig.txt'))
print(s.ci)
sink()
kaka = cbind(incompl$X,results)
head(kaka)
write.csv(kaka,paste0(name.dir,'par_set.csv'),row.names = FALSE)
sink(paste0(name.dir,'parameter_range.txt'))
print(paste('Nsamp =',length(names(hobj$parlist))))
print(hobj)
sink()
# temp_runs=m.ci
#
# p2=ggplot(data=temp_runs, aes(fill=Parameter, x=model_runs, y=sensitivity))+
#   geom_bar(position="dodge", stat="identity")+
#   geom_errorbar(aes(ymax=max.c.i., ymin=min.c.i.), position=position_dodge(width=0.9), width=0.25)+
#   theme(axis.text.x = element_text(angle=90, colour = "black"),
#         axis.text.y = element_text(colour = "black"),
#         axis.line = element_line(colour = "black"),
#         panel.background = element_blank())+
#   scale_x_discrete(breaks=1:9, labels=runs$alias[1:9], limits=c(1:9))+
#   ylab("TSI")+
#   #   scale_fill_manual( values = c('Rchrg_Dp'='grey80',
#   #                                 'Alpha_Bf'='black',
#   #                                 'Gwqmn'='grey60',
#   #                                 'Esco'='grey20',
#   #                                 'Sol_Awc'='grey40') )
#   scale_fill_grey()
